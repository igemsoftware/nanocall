# -*- mode:org; mode:visual-line; coding:utf-8; -*-

*** Nanocall: An Oxford Nanopore Basecaller

**** Installation

Nanocall can be built from source in a classical UNIX environment, or directly under [[https://www.docker.com/what-docker][Docker]]. The Docker build might run under Windows, though this is not tested.

***** Under a Classical UNIX Environment

Nanocall uses =cmake= for configuration and =make= for building. The prerequisites needed for building are =zlib=, =hdf5=, and =seqan=. On UNIX systems, =hdf5= can be optionally built as a submodule. Look [[https://seqan.readthedocs.org/en/master/Infrastructure/Use/Install.html][here]] for information on installing =seqan=.
Example build:

#+BEGIN_EXAMPLE
mkdir /some/source/dir && cd /some/source/dir
git clone --recursive https://github.com/mateidavid/nanocall.git
cd nanocall
mkdir build && cd build
cmake ../src [-DCMAKE_INSTALL_PREFIX=/some/install/dir] [-DBUILD_HDF5=1] [-DHDF5_ROOT=/path/to/hdf5]
make
make install
/some/install/dir/bin/nanocall --version
#+END_EXAMPLE

*NOTES*:

- The default install prefix is =/usr/local=.

- Setting =BUILD_HDF5= will cause =hdf5= to be downloaded and built as a submodule.

- Setting =HDF5_ROOT= is only necessary if a copy of =hdf5= is installed in a non-standard location. This is not needed when =BUILD_HDF5= is used.

***** Under Docker

To avoid dealing with prerequisites, Nanocall can be conveniently built under Docker. Docker installation and configuration is outside of the scope of this document.
Example build:

#+BEGIN_EXAMPLE
mkdir /some/source/dir && cd /some/source/dir
git clone --recursive https://github.com/mateidavid/nanocall.git
docker build -t nanocall /some/source/dir
docker run --rm nanocall
#+END_EXAMPLE

**** Usage Examples

#+BEGIN_EXAMPLE
# Check version
nanocall --version

# Check command line parameters
nanocall --help

# Run on single file, save output and log
nanocall /path/to/file.fast5 >output.fa 2>log

# Run on directory, using 24 threads, discard log
nanocall -t 24 /path/to/data >output.fa 2>/dev/null

# Run on file-of-file-names
nanocall /path/to/files.fofn >output.fa

# Run Docker build on directory, using 4 threads
docker run --rm -u $(id -u):$(id -g) -v /path/to/data:/data nanocall -t 4 . >output.fa
#+END_EXAMPLE

**** License

Released under the [[LICENSE][MIT license]].
